{"version":3,"sources":["components/Search.tsx","config.ts","helpers.ts","components/Navigation.tsx","components/Settings.tsx","components/IssueListItem.tsx","components/LoadMore.tsx","components/Error.tsx","components/IssueList.tsx","components/CommentBody.tsx","components/IssueComment.tsx","components/IssueComments.tsx","components/Issue.tsx","components/App.tsx","apollo.ts","index.tsx"],"names":["IssueStateFilter","githubRepositoryRegex","RegExp","readKeyFromLocalStorage","localStorageKey","defaultValue","localStorageValue","localStorage","getItem","JSON","parse","useStickyState","initialValue","React","useState","value","setValue","useEffect","setItem","stringify","useStyles","makeStyles","theme","createStyles","appBar","color","marginBottom","spacing","title","Navigation","classes","AppBar","position","className","Toolbar","Grid","justify","alignItems","container","item","Button","aria-label","component","RouterLink","to","startIcon","GitHub","fontSize","Typography","variant","endIcon","field","marginTop","marginLeft","marginRight","width","GithubSettingsTextField","id","fieldRegex","label","placeholder","helperText","helperTextError","isValid","test","isTouched","setTouched","FormControl","error","TextField","required","onChange","newValue","target","onFocus","InputLabelProps","shrink","inputProps","spellCheck","Settings","githubConfig","noValidate","autoComplete","md","wrap","repositoryUrl","setRepositoryUrl","token","setToken","Link","href","rel","root","margin","issueStateFilter","radioGreen","green","radioRed","red","Search","setIssueStateFilter","issueTextFilter","setIssueTextFilter","currentSearchValue","setCurrentSearchValue","cancelOnEscape","onRequestSearch","onCancelSearch","console","log","RadioGroup","row","name","FormControlLabel","control","Radio","minWidth","cardContent","paddingLeft","paddingRight","paddingBottom","subTitle","issueOpenIcon","issueClosedIcon","IssueListItem","number","state","createdAt","authorLogin","totalCommentCount","Card","CardActionArea","CardContent","xs","ErrorOutline","CheckCircleOutline","direction","Comment","LoadMore","loadMore","Fab","size","onClick","MoreHoriz","ErrorDetails","details","UnauthenticatedError","Alert","severity","AlertTitle","BadCredentialsError","GraphQLError","packageRepository","url","OtherError","GithubRepositoryConfigError","Error","graphQLErrors","length","message","networkError","statusCode","result","issuesQuery","gql","IssueListItems","githubRepositoryOwner","githubRepositoryName","query","open","push","closed","useQuery","variables","join","loading","data","fetchMore","LinearProgress","search","edges","map","node","author","login","comments","totalCount","key","pageInfo","hasNextPage","after","endCursor","IssueList","both","repositoryName","repositoryOwner","CommentBody","bodyHTML","htmlParser","DOMPurify","sanitize","header","avatar","height","IssueComment","authorUrl","authorAvatarUrl","CardHeader","Avatar","alt","src","substr","titleTypographyProps","subheader","commentsQuery","IssueComments","issueNumber","repository","issue","avatarUrl","issueQuery","firstComment","issueStatusChip","issueStatusChipOpen","backgroundColor","issueStatusChipClosed","issueStatusIcon","Issue","issueNumberParam","useParams","parseInt","action","IconButton","display","Chip","icon","AuthWrapper","children","App","apolloClient","httpLink","createHttpLink","uri","authLink","setContext","_","headers","githubToken","authorization","ApolloClient","link","concat","cache","InMemoryCache","typePolicies","User","keyFields","Repository","fields","relayStylePagination","Query","connectToDevTools","createApolloClient","githubRepositoryUrl","setGithubRepositoryUrl","setGithubToken","githubRepositoryMatch","match","groups","owner","resetStore","client","basename","Container","maxWidth","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42d12644.chunk.js","sourcesContent":["import React from \"react\";\n\nimport SearchBar from \"material-ui-search-bar\";\n\nimport {\n  FormControl,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n} from \"@material-ui/core\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport { green, red } from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      margin: `0 auto`,\n      \"text-align\": \"right\",\n    },\n    issueStateFilter: {\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n    },\n    radioGreen: {\n      color: green[400],\n    },\n    radioRed: {\n      color: red[400],\n    },\n  })\n);\n\nexport enum IssueStateFilter {\n  open = \"open\",\n  closed = \"closed\",\n  both = \"both\",\n}\n\nexport const Search: React.FC<{\n  issueStateFilter: IssueStateFilter;\n  setIssueStateFilter: React.Dispatch<React.SetStateAction<IssueStateFilter>>;\n  issueTextFilter: string;\n  setIssueTextFilter: React.Dispatch<React.SetStateAction<string>>;\n}> = ({\n  issueStateFilter,\n  setIssueStateFilter,\n  issueTextFilter,\n  setIssueTextFilter,\n}) => {\n  const classes = useStyles();\n\n  const [currentSearchValue, setCurrentSearchValue] = React.useState<string>(\n    \"\"\n  );\n\n  return (\n    <div className={classes.root}>\n      <SearchBar\n        cancelOnEscape={true}\n        value={issueTextFilter}\n        onChange={(value): void => setCurrentSearchValue(value)}\n        onRequestSearch={(): void => setIssueTextFilter(currentSearchValue)}\n        onCancelSearch={(): void => {\n          console.log(\"cancel\");\n          setIssueTextFilter(\"\");\n          setCurrentSearchValue(\"\");\n        }}\n      />\n      <FormControl component=\"fieldset\" className={classes.issueStateFilter}>\n        <RadioGroup\n          row\n          aria-label=\"issueStateFilter\"\n          name=\"issueStateFilter\"\n          value={issueStateFilter}\n          onChange={({\n            target: { value },\n          }: React.ChangeEvent<HTMLInputElement>): void =>\n            setIssueStateFilter(value as IssueStateFilter)\n          }\n        >\n          <FormControlLabel\n            value=\"open\"\n            control={<Radio color=\"default\" className={classes.radioGreen} />}\n            label=\"Open\"\n          />\n          <FormControlLabel\n            value=\"closed\"\n            control={<Radio color=\"default\" className={classes.radioRed} />}\n            label=\"Closed\"\n          />\n          <FormControlLabel\n            value=\"both\"\n            control={<Radio color=\"default\" />}\n            label=\"Both\"\n          />\n        </RadioGroup>\n      </FormControl>\n    </div>\n  );\n};\n","export const defaultGitHubRepository = \"https://github.com/facebook/react\";\n// https://regex101.com/r/8IgFO1/2/\nexport const githubRepositoryRegex = new RegExp(\n  \"^https?://github.com/(?<owner>.+?)/(?<name>.+?)(?:/|$)\"\n);\nexport const githubGraphQLEndpoint = \"https://api.github.com/graphql\";\n","import React from \"react\";\n\nexport const readKeyFromLocalStorage = <T>(\n  localStorageKey: string,\n  defaultValue: T\n): T => {\n  const localStorageValue = localStorage.getItem(localStorageKey);\n  return localStorageValue\n    ? (JSON.parse(localStorageValue) as T)\n    : defaultValue;\n};\n\nexport const useStickyState = <T>(\n  localStorageKey: string,\n  defaultValue: T\n): [T, React.Dispatch<React.SetStateAction<T>>] => {\n  const initialValue = readKeyFromLocalStorage(localStorageKey, defaultValue);\n\n  const [value, setValue] = React.useState<T>(initialValue);\n\n  const storeValueInLocalStorage = (): void =>\n    localStorage.setItem(localStorageKey, JSON.stringify(value));\n\n  React.useEffect(storeValueInLocalStorage, [value]);\n\n  return [value, setValue];\n};\n","import React from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\n\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport { AppBar, Button, Toolbar, Typography, Grid } from \"@material-ui/core\";\nimport { Settings, GitHub } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    appBar: {\n      color: \"#fff\",\n      marginBottom: theme.spacing(3),\n    },\n    title: {\n      \"text-transform\": \"none\",\n    },\n  })\n);\n\nexport const Navigation: React.FC<{}> = () => {\n  const classes = useStyles();\n\n  return (\n    <AppBar position=\"static\" className={classes.appBar}>\n      <Toolbar>\n        <Grid justify=\"space-between\" alignItems=\"center\" container>\n          <Grid item>\n            <Button\n              aria-label=\"home\"\n              component={RouterLink}\n              to=\"/\"\n              color=\"inherit\"\n              startIcon={<GitHub fontSize=\"small\" />}\n            >\n              <Typography variant=\"h6\" className={classes.title}>\n                MMS GitHub Issue Explorer\n              </Typography>\n            </Button>\n          </Grid>\n\n          <Grid item>\n            <Button\n              component={RouterLink}\n              to=\"/settings\"\n              endIcon={<Settings />}\n              color=\"inherit\"\n            >\n              Settings\n            </Button>\n          </Grid>\n        </Grid>\n      </Toolbar>\n    </AppBar>\n  );\n};\n","import React from \"react\";\n\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport { Grid, Link, TextField, FormControl } from \"@material-ui/core\";\n\nimport { defaultGitHubRepository, githubRepositoryRegex } from \"../config\";\nimport { GithubConfig } from \"./types\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    field: {\n      marginTop: theme.spacing(3),\n      marginLeft: theme.spacing(2),\n      marginRight: theme.spacing(2),\n      width: \"100%\",\n    },\n  })\n);\n\ninterface GithubSettingsTextFieldProps {\n  id: string;\n  value?: string;\n  setValue: React.Dispatch<React.SetStateAction<string>>;\n  fieldRegex: RegExp;\n  label: string;\n  placeholder: string;\n  helperText: React.ReactNode;\n  helperTextError?: React.ReactNode;\n}\n\nconst GithubSettingsTextField: React.FC<GithubSettingsTextFieldProps> = ({\n  id,\n  value,\n  setValue,\n  fieldRegex,\n  label,\n  placeholder,\n  helperText,\n  helperTextError,\n}) => {\n  const classes = useStyles();\n\n  const isValid = (): boolean => fieldRegex.test(value || \"\");\n  const [isTouched, setTouched] = React.useState<boolean>(false);\n\n  return (\n    <FormControl error={isTouched && !isValid()} className={classes.field}>\n      <TextField\n        id={id}\n        required={true}\n        error={isTouched && !isValid()}\n        value={value}\n        onChange={({\n          target: { value: newValue },\n        }: React.ChangeEvent<HTMLInputElement>): void => setValue(newValue)}\n        onFocus={(): void => setTouched(true)}\n        label={label}\n        placeholder={placeholder}\n        helperText={\n          isTouched && !isValid() ? helperTextError || helperText : helperText\n        }\n        InputLabelProps={{\n          shrink: true,\n        }}\n        inputProps={{ spellCheck: \"false\" }}\n      />\n    </FormControl>\n  );\n};\n\nexport const Settings: React.FC<{\n  githubConfig: GithubConfig;\n}> = ({ githubConfig }) => (\n  <form noValidate autoComplete=\"off\">\n    <Grid\n      container\n      item={true}\n      md={10}\n      wrap=\"wrap\"\n      justify=\"space-between\"\n      alignItems=\"flex-end\"\n    >\n      <GithubSettingsTextField\n        id=\"githubRepository\"\n        value={githubConfig.repositoryUrl}\n        setValue={githubConfig.setRepositoryUrl}\n        fieldRegex={githubRepositoryRegex}\n        label=\"GitHub repository\"\n        placeholder={defaultGitHubRepository}\n        helperText={<span>Enter the full GitHub repository URL</span>}\n        helperTextError={\n          <span>\n            Invalid GitHub repository - use the following format:\n            <br />\n            <strong>{defaultGitHubRepository}</strong>\n          </span>\n        }\n      />\n\n      <GithubSettingsTextField\n        id=\"githubToken\"\n        value={githubConfig.token}\n        setValue={githubConfig.setToken}\n        fieldRegex={new RegExp(\"(.+)\")}\n        label=\"GitHub personal access token\"\n        placeholder=\"token\"\n        helperText={\n          <span>\n            Create a personal access token on GitHub with the public_repo scope\n            -{\" \"}\n            <Link\n              href=\"https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/creating-a-personal-access-token\"\n              target=\"_blank\"\n              rel=\"noopener\"\n              color=\"primary\"\n            >\n              official guide\n            </Link>\n          </span>\n        }\n      />\n    </Grid>\n  </form>\n);\n","import React from \"react\";\n\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport {\n  Card,\n  CardActionArea,\n  CardContent,\n  Grid,\n  Typography,\n} from \"@material-ui/core\";\nimport { Comment, ErrorOutline, CheckCircleOutline } from \"@material-ui/icons\";\nimport { green, red } from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      minWidth: 275,\n      margin: `0px auto ${theme.spacing(2)}px auto`,\n    },\n    cardContent: {\n      paddingLeft: 0,\n      paddingRight: 0,\n      \"&:last-child\": {\n        paddingBottom: theme.spacing(2),\n      },\n    },\n    subTitle: {\n      fontSize: 12,\n    },\n    issueOpenIcon: {\n      color: green[400],\n    },\n    issueClosedIcon: {\n      color: red[600],\n    },\n  })\n);\n\ninterface IssueProps {\n  number: number;\n  title: string;\n  state: \"OPEN\" | \"CLOSED\";\n  createdAt: string;\n  authorLogin: string;\n  totalCommentCount: number;\n}\n\nexport const IssueListItem: React.FC<IssueProps> = ({\n  number,\n  title,\n  state,\n  createdAt,\n  authorLogin,\n  totalCommentCount,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root} variant=\"outlined\">\n      <CardActionArea component={RouterLink} to={`/${number}`}>\n        <CardContent className={classes.cardContent}>\n          <Grid container justify=\"space-between\" alignItems=\"stretch\">\n            <Grid\n              item\n              xs={2}\n              md={1}\n              container\n              alignItems=\"center\"\n              justify=\"center\"\n            >\n              {state === \"OPEN\" ? (\n                <ErrorOutline className={classes.issueOpenIcon} />\n              ) : (\n                <CheckCircleOutline className={classes.issueClosedIcon} />\n              )}\n            </Grid>\n            <Grid\n              item\n              xs={8}\n              md={10}\n              container\n              justify=\"space-around\"\n              alignItems=\"flex-start\"\n              direction=\"column\"\n            >\n              <Typography variant=\"h6\" component=\"h2\">\n                {title}\n              </Typography>\n              <Typography className={classes.subTitle} color=\"textSecondary\">\n                #{number} opened on {createdAt} by {authorLogin}\n              </Typography>\n            </Grid>\n            <Grid\n              item\n              xs={2}\n              md={1}\n              container\n              direction=\"column\"\n              justify=\"center\"\n              alignItems=\"center\"\n            >\n              <Comment />\n              <Typography variant=\"body2\">{totalCommentCount}</Typography>\n            </Grid>\n          </Grid>\n        </CardContent>\n      </CardActionArea>\n    </Card>\n  );\n};\n","import React from \"react\";\n\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport { Fab } from \"@material-ui/core\";\nimport { MoreHoriz } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      \"text-align\": \"center\",\n    },\n  })\n);\n\nexport const LoadMore: React.FC<{\n  loadMore: () => void;\n}> = ({ loadMore }) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Fab\n        size=\"medium\"\n        color=\"primary\"\n        variant=\"extended\"\n        onClick={(): void => loadMore()}\n      >\n        <MoreHoriz />\n        Load more\n      </Fab>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\n\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\nimport { Link, Typography } from \"@material-ui/core\";\n\nimport { ApolloError } from \"@apollo/client\";\nimport { repository as packageRepository } from \"../../package.json\";\n\nconst ErrorDetails: React.FC<{ details: string }> = ({ details }) => (\n  <div>\n    <br />\n    <Typography variant=\"subtitle2\">Error details:</Typography>\n    <Typography variant=\"overline\">{details}</Typography>\n  </div>\n);\n\nexport const UnauthenticatedError: React.FC<{}> = () => (\n  <Alert severity=\"warning\">\n    <AlertTitle>Missing GitHub access token</AlertTitle>\n    Please provide a GitHub personal access token in the{\" \"}\n    <RouterLink to=\"/settings\">settings page</RouterLink>.\n  </Alert>\n);\n\nconst BadCredentialsError: React.FC<{}> = () => (\n  <Alert severity=\"error\">\n    <AlertTitle>Invalid GitHub access token</AlertTitle>\n    Please make sure you have the correct GitHub personal access token it in the{\" \"}\n    <RouterLink to=\"/settings\">settings</RouterLink> and that it has the\n    required scopes (i.e public_repo).\n  </Alert>\n);\n\nconst GraphQLError: React.FC<{ details: string }> = ({ details }) => (\n  <Alert severity=\"error\">\n    <AlertTitle>GraphQL error</AlertTitle>A GraphQL error has occured - please\n    make sure that the schema is up to date and that the{\" \"}\n    <Link\n      href={`${packageRepository.url}/actions`}\n      target=\"_blank\"\n      rel=\"noopener\"\n      color=\"primary\"\n    >\n      project's CI pipeline\n    </Link>{\" \"}\n    is passing.\n    <ErrorDetails details={details} />\n  </Alert>\n);\n\nconst OtherError: React.FC<{ details: string }> = ({ details }) => (\n  <Alert severity=\"error\">\n    <AlertTitle>An unknown error has occured</AlertTitle>\n    Please try again or open an issue in the{\" \"}\n    <Link\n      href={packageRepository.url}\n      target=\"_blank\"\n      rel=\"noopener\"\n      color=\"primary\"\n    >\n      project's repository\n    </Link>\n    <ErrorDetails details={details} />\n  </Alert>\n);\n\nexport const GithubRepositoryConfigError: React.FC<{}> = () => (\n  <Alert severity=\"error\">\n    <AlertTitle>Invalid GitHub repository</AlertTitle>\n    Please set a valid repository URL in the{\" \"}\n    <RouterLink to=\"/settings\">settings</RouterLink>\n  </Alert>\n);\n\nexport const Error: React.FC<{ error: ApolloError }> = ({ error }) => {\n  if (error.graphQLErrors.length > 0) {\n    return <GraphQLError details={error.message} />;\n  }\n\n  if (error.networkError && \"statusCode\" in error.networkError) {\n    if (error.networkError.statusCode === 401) {\n      return \"result\" in error.networkError &&\n        error.networkError.result?.message === \"Bad credentials\" ? (\n        <BadCredentialsError />\n      ) : (\n        <UnauthenticatedError />\n      );\n    }\n  }\n\n  return <OtherError details={error.message} />;\n};\n","import React from \"react\";\n\nimport { useQuery, gql } from \"@apollo/client\";\nimport { LinearProgress } from \"@material-ui/core\";\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\n\nimport { Search, IssueStateFilter } from \"./Search\";\nimport { IssueListItem } from \"./IssueListItem\";\nimport { LoadMore } from \"./LoadMore\";\nimport { Error } from \"./Error\";\nimport { GithubConfig, GQLSearchIssues } from \"./types\";\n\nconst issuesQuery = gql`\n  query SearchIssues($query: String!, $after: String) {\n    search(type: ISSUE, query: $query, last: 10, after: $after) {\n      edges {\n        node {\n          ... on Issue {\n            author {\n              login\n            }\n            comments {\n              totalCount\n            }\n            id\n            number\n            state\n            title\n            createdAt\n          }\n        }\n      }\n      pageInfo {\n        startCursor\n        hasPreviousPage\n        hasNextPage\n        endCursor\n      }\n    }\n  }\n`;\n\nconst IssueListItems: React.FC<{\n  githubRepositoryOwner: string;\n  githubRepositoryName: string;\n  issueStateFilter: IssueStateFilter;\n  issueTextFilter: string;\n}> = ({\n  githubRepositoryOwner,\n  githubRepositoryName,\n  issueStateFilter,\n  issueTextFilter,\n}) => {\n  const query: string[] = [\n    `repo:${githubRepositoryOwner}/${githubRepositoryName}`,\n    `is:issue`,\n    `sort:created`,\n    issueTextFilter,\n  ];\n\n  if (issueStateFilter === IssueStateFilter.open) {\n    query.push(\"is:open\");\n  } else if (issueStateFilter === IssueStateFilter.closed) {\n    query.push(\"is:closed\");\n  }\n\n  const { loading, error, data, fetchMore } = useQuery<GQLSearchIssues>(\n    issuesQuery,\n    {\n      variables: {\n        query: query.join(\" \"),\n      },\n    }\n  );\n\n  if (loading) return <LinearProgress />;\n  if (error) return <Error error={error} />;\n  if (!data || data.search.edges.length === 0)\n    return (\n      <Alert severity=\"info\">\n        <AlertTitle>No issues found</AlertTitle>\n      </Alert>\n    );\n\n  const fetchMoreIssues = (): void => {\n    fetchMore({\n      variables: {\n        after: data.search.pageInfo.endCursor,\n      },\n    });\n  };\n\n  return (\n    <>\n      {data.search.edges.map(\n        ({\n          node: {\n            id,\n            number,\n            title,\n            state,\n            createdAt,\n            author: { login: authorLogin },\n            comments: { totalCount: totalCommentCount },\n          },\n        }) => (\n          <IssueListItem\n            {...{\n              number,\n              title,\n              state,\n              createdAt,\n              authorLogin,\n              totalCommentCount,\n            }}\n            key={id}\n          />\n        )\n      )}\n      {data.search.pageInfo.hasNextPage && (\n        <LoadMore loadMore={fetchMoreIssues} />\n      )}\n    </>\n  );\n};\n\nexport const IssueList: React.FC<{\n  githubConfig: Required<GithubConfig>;\n}> = ({ githubConfig }) => {\n  const [issueStateFilter, setIssueStateFilter] = React.useState<\n    IssueStateFilter\n  >(IssueStateFilter.both);\n\n  const [issueTextFilter, setIssueTextFilter] = React.useState<string>(\"\");\n\n  return (\n    <>\n      <Search\n        {...{\n          issueStateFilter,\n          setIssueStateFilter,\n          issueTextFilter,\n          setIssueTextFilter,\n        }}\n      />\n      <IssueListItems\n        {...{\n          githubRepositoryName: githubConfig.repositoryName,\n          githubRepositoryOwner: githubConfig.repositoryOwner,\n          issueStateFilter,\n          issueTextFilter,\n        }}\n      />\n    </>\n  );\n};\n","import React from \"react\";\n\nimport htmlParser from \"html-react-parser\";\nimport DOMPurify from \"dompurify\";\n\nimport \"github-markdown-css\";\n\nexport const CommentBody: React.FC<{\n  bodyHTML: string;\n}> = ({ bodyHTML }) => {\n  return (\n    <div className=\"markdown-body\">\n      {htmlParser(DOMPurify.sanitize(bodyHTML))}\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { Avatar, CardContent, CardHeader, Link, Card } from \"@material-ui/core\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\n\nimport { CommentBody } from \"./CommentBody\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      marginLeft: theme.spacing(3),\n      marginBottom: theme.spacing(1),\n    },\n    header: {\n      \"& > .MuiCardHeader-avatar\": {\n        marginRight: theme.spacing(1),\n      },\n    },\n    avatar: {\n      width: theme.spacing(3),\n      height: theme.spacing(3),\n    },\n  })\n);\n\nexport const IssueComment: React.FC<{\n  createdAt: string;\n  authorLogin: string;\n  authorUrl: string;\n  authorAvatarUrl: string;\n  bodyHTML: string;\n}> = ({ createdAt, authorLogin, authorUrl, authorAvatarUrl, bodyHTML }) => {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root} variant=\"outlined\">\n      <CardHeader\n        avatar={\n          <Avatar\n            alt={authorLogin}\n            src={authorAvatarUrl}\n            className={classes.avatar}\n          >\n            {authorLogin.substr(0, 1)}\n          </Avatar>\n        }\n        titleTypographyProps={{ variant: \"h5\" }}\n        subheader={\n          <span>\n            <Link href={authorUrl} target=\"_blank\" rel=\"noopener\">\n              {authorLogin}\n            </Link>{\" \"}\n            on {createdAt}\n          </span>\n        }\n        className={classes.header}\n      />\n      <CardContent>\n        <CommentBody bodyHTML={bodyHTML} />\n      </CardContent>\n    </Card>\n  );\n};\n","import React from \"react\";\n\nimport { useQuery, gql } from \"@apollo/client\";\nimport { LinearProgress } from \"@material-ui/core\";\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\n\nimport { IssueComment } from \"./IssueComment\";\nimport { LoadMore } from \"./LoadMore\";\nimport { Error } from \"./Error\";\nimport { GithubConfig, GQLIssueComments } from \"./types\";\n\nconst commentsQuery = gql`\n  query GetIssueComments(\n    $githubRepositoryName: String!\n    $githubRepositoryOwner: String!\n    $issueNumber: Int!\n    $after: String\n  ) {\n    repository(name: $githubRepositoryName, owner: $githubRepositoryOwner) {\n      issue(number: $issueNumber) {\n        id\n        comments(first: 10, after: $after) {\n          edges {\n            node {\n              id\n              createdAt\n              author {\n                login\n                avatarUrl\n                url\n              }\n              bodyHTML\n            }\n          }\n          pageInfo {\n            startCursor\n            hasPreviousPage\n            hasNextPage\n            endCursor\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const IssueComments: React.FC<{\n  githubConfig: Required<GithubConfig>;\n  issueNumber: number;\n}> = ({ githubConfig, issueNumber }) => {\n  const { loading, error, data, fetchMore } = useQuery<GQLIssueComments>(\n    commentsQuery,\n    {\n      variables: {\n        githubRepositoryName: githubConfig.repositoryName,\n        githubRepositoryOwner: githubConfig.repositoryOwner,\n        issueNumber,\n      },\n    }\n  );\n\n  if (loading) return <LinearProgress />;\n  if (error) return <Error error={error} />;\n  if (!data || data.repository.issue.comments.edges.length === 0)\n    return (\n      <Alert severity=\"info\">\n        <AlertTitle>No comments yets</AlertTitle>\n      </Alert>\n    );\n\n  const fetchMoreComments = (): void => {\n    fetchMore({\n      variables: {\n        after: data.repository.issue.comments.pageInfo.endCursor,\n      },\n    });\n  };\n\n  return (\n    <>\n      {data.repository.issue.comments.edges.map(\n        ({\n          node: {\n            author: {\n              login: authorLogin,\n              url: authorUrl,\n              avatarUrl: authorAvatarUrl,\n            },\n            bodyHTML,\n            createdAt,\n            id,\n          },\n        }) => (\n          <IssueComment\n            {...{\n              createdAt,\n              authorLogin,\n              authorUrl,\n              authorAvatarUrl,\n              bodyHTML,\n            }}\n            key={id}\n          />\n        )\n      )}\n      {data.repository.issue.comments.pageInfo.hasNextPage && (\n        <LoadMore loadMore={fetchMoreComments} />\n      )}\n    </>\n  );\n};\n","import React from \"react\";\n\nimport { useQuery, gql } from \"@apollo/client\";\nimport { useParams } from \"react-router-dom\";\n\nimport {\n  Avatar,\n  Card,\n  CardContent,\n  CardHeader,\n  Chip,\n  Grid,\n  IconButton,\n  LinearProgress,\n  Link,\n  Typography,\n} from \"@material-ui/core\";\nimport {} from \"@material-ui/core\";\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport { ErrorOutline, CheckCircleOutline, GitHub } from \"@material-ui/icons\";\nimport { green, red } from \"@material-ui/core/colors\";\n\nimport { Error } from \"./Error\";\nimport { IssueComments } from \"./IssueComments\";\nimport { CommentBody } from \"./CommentBody\";\nimport { GithubConfig, GQLGetIssue } from \"./types\";\n\nconst issueQuery = gql`\n  query GetIssue(\n    $githubRepositoryName: String!\n    $githubRepositoryOwner: String!\n    $issueNumber: Int!\n  ) {\n    repository(name: $githubRepositoryName, owner: $githubRepositoryOwner) {\n      issue(number: $issueNumber) {\n        id\n        number\n        state\n        title\n        url\n        author {\n          avatarUrl(size: 40)\n          login\n          url\n        }\n        bodyHTML\n        createdAt\n      }\n    }\n  }\n`;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      paddingBottom: theme.spacing(5),\n    },\n    firstComment: {\n      marginBottom: theme.spacing(1),\n    },\n    issueStatusChip: {\n      color: \"white\",\n      marginLeft: theme.spacing(1),\n    },\n    issueStatusChipOpen: {\n      backgroundColor: green[400],\n    },\n    issueStatusChipClosed: {\n      backgroundColor: red[600],\n    },\n    issueStatusIcon: {\n      color: \"white\",\n    },\n  })\n);\n\nexport const Issue: React.FC<{\n  githubConfig: Required<GithubConfig>;\n}> = ({ githubConfig }) => {\n  const classes = useStyles();\n\n  const { issueNumber: issueNumberParam } = useParams();\n  const issueNumber = parseInt(issueNumberParam, 10);\n\n  const { loading, error, data } = useQuery<GQLGetIssue>(issueQuery, {\n    variables: {\n      githubRepositoryOwner: githubConfig.repositoryOwner,\n      githubRepositoryName: githubConfig.repositoryName,\n      issueNumber,\n    },\n  });\n\n  if (loading) return <LinearProgress />;\n  if (error) return <Error error={error} />;\n  if (!data || !data.repository.issue)\n    return (\n      <Alert severity=\"warning\">\n        <AlertTitle>Issue not found</AlertTitle>\n      </Alert>\n    );\n  const { issue } = data.repository;\n\n  return (\n    <div className={classes.root}>\n      <Card variant=\"outlined\" className={classes.firstComment}>\n        <CardHeader\n          avatar={\n            <Avatar alt={issue.author.login} src={issue.author.avatarUrl}>\n              {issue.author.login.substr(0, 1)}\n            </Avatar>\n          }\n          action={\n            <IconButton\n              aria-label=\"settings\"\n              component={Link}\n              href={issue.url}\n              target=\"_blank\"\n              rel=\"noopener\"\n              color=\"primary\"\n            >\n              <Grid container direction=\"column\" alignItems=\"center\">\n                <GitHub />\n                <Typography variant=\"body2\">#{issue.number}</Typography>\n              </Grid>\n            </IconButton>\n          }\n          title={issue.title}\n          titleTypographyProps={{ variant: \"h5\" }}\n          subheader={\n            <Grid container alignItems=\"center\">\n              <Typography display=\"inline\">\n                by{\" \"}\n                <Link href={issue.author.url} target=\"_blank\" rel=\"noopener\">\n                  {issue.author.login}\n                </Link>{\" \"}\n                on {issue.createdAt}\n              </Typography>\n              {issue.state === \"OPEN\" ? (\n                <Chip\n                  label=\"Open\"\n                  size=\"small\"\n                  icon={<ErrorOutline className={classes.issueStatusIcon} />}\n                  className={`${classes.issueStatusChip} ${classes.issueStatusChipOpen}`}\n                />\n              ) : (\n                <Chip\n                  label=\"Closed\"\n                  size=\"small\"\n                  icon={\n                    <CheckCircleOutline className={classes.issueStatusIcon} />\n                  }\n                  className={`${classes.issueStatusChip} ${classes.issueStatusChipClosed}`}\n                />\n              )}\n            </Grid>\n          }\n        />\n        <CardContent>\n          <CommentBody bodyHTML={issue.bodyHTML} />\n        </CardContent>\n      </Card>\n\n      <IssueComments githubConfig={githubConfig} issueNumber={issueNumber} />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { ApolloProvider } from \"@apollo/client\";\n\nimport { Container } from \"@material-ui/core\";\n\nimport { createApolloClient } from \"../apollo\";\nimport { Navigation } from \"./Navigation\";\nimport { Settings } from \"./Settings\";\nimport { IssueList } from \"./IssueList\";\nimport { Issue } from \"./Issue\";\nimport { UnauthenticatedError, GithubRepositoryConfigError } from \"./Error\";\n\nimport { useStickyState } from \"../helpers\";\nimport { defaultGitHubRepository, githubRepositoryRegex } from \"../config\";\nimport { GithubConfig } from \"./types\";\nimport \"./app.css\";\n\nconst AuthWrapper: React.FC<{\n  githubConfig: GithubConfig;\n}> = ({ githubConfig, children }) => {\n  if (!githubConfig.repositoryOwner || !githubConfig.repositoryName) {\n    return <GithubRepositoryConfigError />;\n  }\n  if (!githubConfig.token) {\n    return <UnauthenticatedError />;\n  }\n\n  return <>{children}</>;\n};\n\nexport const App: React.FC<{}> = () => {\n  const apolloClient = createApolloClient();\n  const deleteApolloCache = (): void => {\n    apolloClient.resetStore();\n  };\n\n  const [githubRepositoryUrl, setGithubRepositoryUrl] = useStickyState<string>(\n    \"githubRepositoryUrl\",\n    defaultGitHubRepository\n  );\n  const [githubToken, setGithubToken] = useStickyState<string>(\n    \"githubToken\",\n    \"\"\n  );\n\n  const githubRepositoryMatch = githubRepositoryUrl.match(\n    githubRepositoryRegex\n  );\n  const githubConfig: GithubConfig = {\n    token: githubToken,\n    setToken: setGithubToken,\n    repositoryUrl: githubRepositoryUrl,\n    setRepositoryUrl: setGithubRepositoryUrl,\n    repositoryOwner: githubRepositoryMatch?.groups?.owner,\n    repositoryName: githubRepositoryMatch?.groups?.name,\n  };\n\n  React.useEffect(deleteApolloCache, [githubRepositoryUrl, githubToken]);\n\n  return (\n    <ApolloProvider client={apolloClient}>\n      <Router\n        basename={\n          // GitHub pages navigation workaround\n          // see https://github.com/rafgraph/spa-github-pages#single-page-apps-for-github-pages\n          process.env.NODE_ENV === \"production\"\n            ? \"/mms-github-issue-explorer\"\n            : \"/\"\n        }\n      >\n        <Navigation />\n\n        <Container maxWidth=\"md\">\n          <Switch>\n            <Route path=\"/settings\">\n              <Settings githubConfig={githubConfig} />\n            </Route>\n            <Route path=\"/:issueNumber\">\n              <AuthWrapper githubConfig={githubConfig}>\n                <Issue githubConfig={githubConfig as Required<GithubConfig>} />\n              </AuthWrapper>\n            </Route>\n            <Route path=\"/\">\n              <AuthWrapper githubConfig={githubConfig}>\n                <IssueList\n                  githubConfig={githubConfig as Required<GithubConfig>}\n                />\n              </AuthWrapper>\n            </Route>\n          </Switch>\n        </Container>\n      </Router>\n    </ApolloProvider>\n  );\n};\n","import {\n  ApolloClient,\n  InMemoryCache,\n  NormalizedCacheObject,\n  createHttpLink,\n} from \"@apollo/client\";\n\nimport { setContext } from \"@apollo/client/link/context\";\nimport { relayStylePagination } from \"@apollo/client/utilities\";\n\nimport { githubGraphQLEndpoint } from \"./config\";\nimport { readKeyFromLocalStorage } from \"./helpers\";\n\nexport const createApolloClient = (): ApolloClient<NormalizedCacheObject> => {\n  const httpLink = createHttpLink({\n    uri: githubGraphQLEndpoint,\n  });\n\n  const authLink = setContext((_, { headers }) => {\n    const githubToken = readKeyFromLocalStorage<string>(\"githubToken\", \"\");\n    return {\n      headers: {\n        ...headers,\n        authorization: githubToken ? `bearer ${githubToken}` : \"\",\n      },\n    };\n  });\n\n  return new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache({\n      typePolicies: {\n        // the user (`author` prop) `login` (username) is distinct no matter if\n        // the user data is fetched from the `GetIssue` query or the `SearchIssues`\n        User: {\n          keyFields: [\"login\"],\n        },\n        // `Repository` queries are the ones for fetching single issues (`GetIssue`)\n        // hence the nested `id` prop. of the issue should be used as the cache key\n        Repository: {\n          keyFields: [[\"id\"]],\n        },\n        Issue: {\n          fields: {\n            // pagination policy for comment retrieval\n            comments: relayStylePagination([[\"issueNumber\"]]),\n          },\n        },\n        Query: {\n          fields: {\n            // pagination policy for issue search/list\n            search: relayStylePagination([\"query\"]),\n          },\n        },\n      },\n    }),\n    connectToDevTools: true,\n  });\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { App } from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}