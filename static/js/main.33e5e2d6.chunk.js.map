{"version":3,"sources":["components/Search.tsx","components/Navigation.tsx","config.ts","helpers.ts","components/Settings.tsx","components/IssueListItem.tsx","components/LoadMore.tsx","components/Error.tsx","components/IssueList.tsx","components/CommentBody.tsx","components/IssueComment.tsx","components/IssueComments.tsx","components/Issue.tsx","components/App.tsx","index.tsx","apollo.ts"],"names":["IssueStateFilter","useStyles","makeStyles","theme","createStyles","appBar","color","marginBottom","spacing","title","Navigation","classes","AppBar","position","className","Toolbar","Grid","justify","alignItems","container","item","Button","aria-label","component","RouterLink","to","startIcon","GitHub","fontSize","Typography","variant","endIcon","githubRepositoryRegex","RegExp","readKeyFromLocalStorage","localStorageKey","defaultValue","localStorageValue","localStorage","getItem","JSON","parse","field","marginTop","marginLeft","marginRight","width","GithubSettingsTextField","fieldName","fieldDefaultValue","fieldRegex","id","label","placeholder","helperText","helperTextError","initialValue","React","useState","value","setValue","useEffect","setItem","stringify","useStickyState","isValid","test","isTouched","setTouched","FormControl","error","TextField","required","onChange","newValue","target","onFocus","InputLabelProps","shrink","inputProps","spellCheck","Settings","noValidate","autoComplete","md","wrap","Link","href","rel","root","margin","issueStateFilter","radioGreen","green","radioRed","red","Search","setIssueStateFilter","issueTextFilter","setIssueTextFilter","currentSearchValue","setCurrentSearchValue","cancelOnEscape","onRequestSearch","onCancelSearch","console","log","RadioGroup","row","name","FormControlLabel","control","Radio","minWidth","cardContent","paddingLeft","paddingRight","paddingBottom","subTitle","issueOpenIcon","issueClosedIcon","IssueListItem","number","state","createdAt","authorLogin","totalCommentCount","Card","CardActionArea","CardContent","xs","ErrorOutline","CheckCircleOutline","direction","Comment","LoadMore","loadMore","Fab","size","onClick","MoreHoriz","ErrorDetails","details","UnauthenticatedError","Alert","severity","AlertTitle","BadCredentialsError","GraphQLError","packageRepository","url","OtherError","GithubRepositoryConfigError","Error","graphQLErrors","length","message","networkError","statusCode","result","issuesQuery","gql","IssueListItems","githubRepositoryOwner","githubRepositoryName","query","open","push","closed","useQuery","variables","join","loading","data","fetchMore","LinearProgress","search","edges","map","node","author","login","comments","totalCount","key","pageInfo","hasNextPage","after","endCursor","IssueList","githubConfig","both","repositoryName","repositoryOwner","CommentBody","bodyHTML","htmlParser","DOMPurify","sanitize","header","avatar","height","IssueComment","authorUrl","authorAvatarUrl","CardHeader","Avatar","alt","src","substr","titleTypographyProps","subheader","commentsQuery","IssueComments","issueNumber","repository","issue","avatarUrl","issueQuery","firstComment","issueStatusChip","issueStatusChipOpen","backgroundColor","issueStatusChipClosed","issueStatusIcon","Issue","issueNumberParam","useParams","parseInt","action","IconButton","display","Chip","icon","AuthWrapper","children","token","App","githubRepositoryUrl","githubRepositoryMatch","match","undefined","repositoryUrl","groups","owner","basename","Container","maxWidth","path","apolloClient","httpLink","createHttpLink","uri","authLink","setContext","_","headers","githubToken","authorization","ApolloClient","link","concat","cache","InMemoryCache","typePolicies","User","keyFields","Repository","fields","relayStylePagination","Query","connectToDevTools","createApolloClient","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.33e5e2d6.chunk.js","sourcesContent":["import React from \"react\";\n\nimport SearchBar from \"material-ui-search-bar\";\n\nimport {\n  FormControl,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n} from \"@material-ui/core\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport { green, red } from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      margin: `0 auto`,\n      \"text-align\": \"right\",\n    },\n    issueStateFilter: {\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n    },\n    radioGreen: {\n      color: green[400],\n    },\n    radioRed: {\n      color: red[400],\n    },\n  })\n);\n\nexport enum IssueStateFilter {\n  open = \"open\",\n  closed = \"closed\",\n  both = \"both\",\n}\n\nexport const Search: React.FC<{\n  issueStateFilter: IssueStateFilter;\n  setIssueStateFilter: React.Dispatch<React.SetStateAction<IssueStateFilter>>;\n  issueTextFilter: string;\n  setIssueTextFilter: React.Dispatch<React.SetStateAction<string>>;\n}> = ({\n  issueStateFilter,\n  setIssueStateFilter,\n  issueTextFilter,\n  setIssueTextFilter,\n}) => {\n  const classes = useStyles();\n\n  const [currentSearchValue, setCurrentSearchValue] = React.useState<string>(\n    \"\"\n  );\n\n  return (\n    <div className={classes.root}>\n      <SearchBar\n        cancelOnEscape={true}\n        value={issueTextFilter}\n        onChange={(value): void => setCurrentSearchValue(value)}\n        onRequestSearch={(): void => setIssueTextFilter(currentSearchValue)}\n        onCancelSearch={(): void => {\n          console.log(\"cancel\");\n          setIssueTextFilter(\"\");\n          setCurrentSearchValue(\"\");\n        }}\n      />\n      <FormControl component=\"fieldset\" className={classes.issueStateFilter}>\n        <RadioGroup\n          row\n          aria-label=\"issueStateFilter\"\n          name=\"issueStateFilter\"\n          value={issueStateFilter}\n          onChange={({\n            target: { value },\n          }: React.ChangeEvent<HTMLInputElement>): void =>\n            setIssueStateFilter(value as IssueStateFilter)\n          }\n        >\n          <FormControlLabel\n            value=\"open\"\n            control={<Radio color=\"default\" className={classes.radioGreen} />}\n            label=\"Open\"\n          />\n          <FormControlLabel\n            value=\"closed\"\n            control={<Radio color=\"default\" className={classes.radioRed} />}\n            label=\"Closed\"\n          />\n          <FormControlLabel\n            value=\"both\"\n            control={<Radio color=\"default\" />}\n            label=\"Both\"\n          />\n        </RadioGroup>\n      </FormControl>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\n\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport { AppBar, Button, Toolbar, Typography, Grid } from \"@material-ui/core\";\nimport { Settings, GitHub } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    appBar: {\n      color: \"#fff\",\n      marginBottom: theme.spacing(3),\n    },\n    title: {\n      \"text-transform\": \"none\",\n    },\n  })\n);\n\nexport const Navigation: React.FC<{}> = () => {\n  const classes = useStyles();\n\n  return (\n    <AppBar position=\"static\" className={classes.appBar}>\n      <Toolbar>\n        <Grid justify=\"space-between\" alignItems=\"center\" container>\n          <Grid item>\n            <Button\n              aria-label=\"home\"\n              component={RouterLink}\n              to=\"/\"\n              color=\"inherit\"\n              startIcon={<GitHub fontSize=\"small\" />}\n            >\n              <Typography variant=\"h6\" className={classes.title}>\n                MMS GitHub Issue Explorer\n              </Typography>\n            </Button>\n          </Grid>\n\n          <Grid item>\n            <Button\n              component={RouterLink}\n              to=\"/settings\"\n              endIcon={<Settings />}\n              color=\"inherit\"\n            >\n              Settings\n            </Button>\n          </Grid>\n        </Grid>\n      </Toolbar>\n    </AppBar>\n  );\n};\n","export const defaultGitHubRepository = \"https://github.com/facebook/react\";\n// https://regex101.com/r/8IgFO1/2/\nexport const githubRepositoryRegex = new RegExp(\n  \"^https?://github.com/(?<owner>.+?)/(?<name>.+?)(?:/|$)\"\n);\nexport const githubGraphQLEndpoint = \"https://api.github.com/graphql\";\n","import React from \"react\";\n\nexport const readKeyFromLocalStorage = <T>(\n  localStorageKey: string,\n  defaultValue: T\n): T => {\n  const localStorageValue = localStorage.getItem(localStorageKey);\n  return localStorageValue\n    ? (JSON.parse(localStorageValue) as T)\n    : defaultValue;\n};\n\nexport const useStickyState = <T>(\n  localStorageKey: string,\n  defaultValue: T\n): [T, React.Dispatch<React.SetStateAction<T>>] => {\n  const initialValue = readKeyFromLocalStorage(localStorageKey, defaultValue);\n\n  const [value, setValue] = React.useState<T>(initialValue);\n\n  const storeValueInLocalStorage = (): void =>\n    localStorage.setItem(localStorageKey, JSON.stringify(value));\n\n  React.useEffect(storeValueInLocalStorage, [value]);\n\n  return [value, setValue];\n};\n","import React from \"react\";\n\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport { Grid, Link, TextField, FormControl } from \"@material-ui/core\";\n\nimport { defaultGitHubRepository, githubRepositoryRegex } from \"../config\";\nimport { useStickyState } from \"../helpers\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    field: {\n      marginTop: theme.spacing(3),\n      marginLeft: theme.spacing(2),\n      marginRight: theme.spacing(2),\n      width: \"100%\",\n    },\n  })\n);\n\ninterface GithubSettingsTextFieldProps {\n  fieldName: string;\n  fieldDefaultValue: string;\n  fieldRegex: RegExp;\n  id: string;\n  label: string;\n  placeholder: string;\n  helperText: React.ReactNode;\n  helperTextError?: React.ReactNode;\n}\n\nconst GithubSettingsTextField: React.FC<GithubSettingsTextFieldProps> = ({\n  fieldName,\n  fieldDefaultValue,\n  fieldRegex,\n  id,\n  label,\n  placeholder,\n  helperText,\n  helperTextError,\n}) => {\n  const classes = useStyles();\n\n  const [value, setValue] = useStickyState<string>(\n    fieldName,\n    fieldDefaultValue\n  );\n  const isValid = (): boolean => fieldRegex.test(value);\n  const [isTouched, setTouched] = React.useState<boolean>(false);\n\n  return (\n    <FormControl error={isTouched && !isValid()} className={classes.field}>\n      <TextField\n        id={id}\n        required={true}\n        error={isTouched && !isValid()}\n        value={value}\n        onChange={({\n          target: { value: newValue },\n        }: React.ChangeEvent<HTMLInputElement>): void => setValue(newValue)}\n        onFocus={(): void => setTouched(true)}\n        label={label}\n        placeholder={placeholder}\n        helperText={\n          isTouched && !isValid() ? helperTextError || helperText : helperText\n        }\n        InputLabelProps={{\n          shrink: true,\n        }}\n        inputProps={{ spellCheck: \"false\" }}\n      />\n    </FormControl>\n  );\n};\n\nexport const Settings: React.FC<{}> = () => (\n  <form noValidate autoComplete=\"off\">\n    <Grid\n      container\n      item={true}\n      md={10}\n      wrap=\"wrap\"\n      justify=\"space-between\"\n      alignItems=\"flex-end\"\n    >\n      <GithubSettingsTextField\n        fieldName=\"githubRepository\"\n        fieldDefaultValue={defaultGitHubRepository}\n        fieldRegex={githubRepositoryRegex}\n        id=\"githubRepository\"\n        label=\"GitHub repository\"\n        placeholder={defaultGitHubRepository}\n        helperText={<span>Enter the full GitHub repository URL</span>}\n        helperTextError={\n          <span>\n            Invalid GitHub repository - use the following format:\n            <br />\n            <strong>{defaultGitHubRepository}</strong>\n          </span>\n        }\n      />\n\n      <GithubSettingsTextField\n        fieldName=\"githubToken\"\n        fieldDefaultValue={\"\"}\n        fieldRegex={new RegExp(\"(.+)\")}\n        id=\"githubToken\"\n        label=\"GitHub personal access token\"\n        placeholder=\"token\"\n        helperText={\n          <span>\n            Create a personal access token on GitHub with the public_repo scope\n            -{\" \"}\n            <Link\n              href=\"https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/creating-a-personal-access-token\"\n              target=\"_blank\"\n              rel=\"noopener\"\n              color=\"primary\"\n            >\n              official guide\n            </Link>\n          </span>\n        }\n      />\n    </Grid>\n  </form>\n);\n","import React from \"react\";\n\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport {\n  Card,\n  CardActionArea,\n  CardContent,\n  Grid,\n  Typography,\n} from \"@material-ui/core\";\nimport { Comment, ErrorOutline, CheckCircleOutline } from \"@material-ui/icons\";\nimport { green, red } from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      minWidth: 275,\n      margin: `0px auto ${theme.spacing(2)}px auto`,\n    },\n    cardContent: {\n      paddingLeft: 0,\n      paddingRight: 0,\n      \"&:last-child\": {\n        paddingBottom: theme.spacing(2),\n      },\n    },\n    subTitle: {\n      fontSize: 12,\n    },\n    issueOpenIcon: {\n      color: green[400],\n    },\n    issueClosedIcon: {\n      color: red[600],\n    },\n  })\n);\n\ninterface IssueProps {\n  number: number;\n  title: string;\n  state: \"OPEN\" | \"CLOSED\";\n  createdAt: string;\n  authorLogin: string;\n  totalCommentCount: number;\n}\n\nexport const IssueListItem: React.FC<IssueProps> = ({\n  number,\n  title,\n  state,\n  createdAt,\n  authorLogin,\n  totalCommentCount,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root} variant=\"outlined\">\n      <CardActionArea component={RouterLink} to={`/${number}`}>\n        <CardContent className={classes.cardContent}>\n          <Grid container justify=\"space-between\" alignItems=\"stretch\">\n            <Grid\n              item\n              xs={2}\n              md={1}\n              container\n              alignItems=\"center\"\n              justify=\"center\"\n            >\n              {state === \"OPEN\" ? (\n                <ErrorOutline className={classes.issueOpenIcon} />\n              ) : (\n                <CheckCircleOutline className={classes.issueClosedIcon} />\n              )}\n            </Grid>\n            <Grid\n              item\n              xs={8}\n              md={10}\n              container\n              justify=\"space-around\"\n              alignItems=\"flex-start\"\n              direction=\"column\"\n            >\n              <Typography variant=\"h6\" component=\"h2\">\n                {title}\n              </Typography>\n              <Typography className={classes.subTitle} color=\"textSecondary\">\n                #{number} opened on {createdAt} by {authorLogin}\n              </Typography>\n            </Grid>\n            <Grid\n              item\n              xs={2}\n              md={1}\n              container\n              direction=\"column\"\n              justify=\"center\"\n              alignItems=\"center\"\n            >\n              <Comment />\n              <Typography variant=\"body2\">{totalCommentCount}</Typography>\n            </Grid>\n          </Grid>\n        </CardContent>\n      </CardActionArea>\n    </Card>\n  );\n};\n","import React from \"react\";\n\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport { Fab } from \"@material-ui/core\";\nimport { MoreHoriz } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      \"text-align\": \"center\",\n    },\n  })\n);\n\nexport const LoadMore: React.FC<{\n  loadMore: () => void;\n}> = ({ loadMore }) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Fab\n        size=\"medium\"\n        color=\"primary\"\n        variant=\"extended\"\n        onClick={(): void => loadMore()}\n      >\n        <MoreHoriz />\n        Load more\n      </Fab>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\n\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\nimport { Link, Typography } from \"@material-ui/core\";\n\nimport { ApolloError } from \"@apollo/client\";\nimport { repository as packageRepository } from \"../../package.json\";\n\nconst ErrorDetails: React.FC<{ details: string }> = ({ details }) => (\n  <div>\n    <br />\n    <Typography variant=\"subtitle2\">Error details:</Typography>\n    <Typography variant=\"overline\">{details}</Typography>\n  </div>\n);\n\nexport const UnauthenticatedError: React.FC<{}> = () => (\n  <Alert severity=\"warning\">\n    <AlertTitle>Missing GitHub access token</AlertTitle>\n    Please provide a GitHub personal access token in the{\" \"}\n    <RouterLink to=\"/settings\">settings page</RouterLink>.\n  </Alert>\n);\n\nconst BadCredentialsError: React.FC<{}> = () => (\n  <Alert severity=\"error\">\n    <AlertTitle>Invalid GitHub access token</AlertTitle>\n    Please make sure you have the correct GitHub personal access token it in the{\" \"}\n    <RouterLink to=\"/settings\">settings</RouterLink> and that it has the\n    required scopes (i.e public_repo).\n  </Alert>\n);\n\nconst GraphQLError: React.FC<{ details: string }> = ({ details }) => (\n  <Alert severity=\"error\">\n    <AlertTitle>GraphQL error</AlertTitle>A GraphQL error has occured - please\n    make sure that the schema is up to date and that the{\" \"}\n    <Link\n      href={`${packageRepository.url}/actions`}\n      target=\"_blank\"\n      rel=\"noopener\"\n      color=\"primary\"\n    >\n      project's CI pipeline\n    </Link>{\" \"}\n    is passing.\n    <ErrorDetails details={details} />\n  </Alert>\n);\n\nconst OtherError: React.FC<{ details: string }> = ({ details }) => (\n  <Alert severity=\"error\">\n    <AlertTitle>An unknown error has occured</AlertTitle>\n    Please try again or open an issue in the{\" \"}\n    <Link\n      href={packageRepository.url}\n      target=\"_blank\"\n      rel=\"noopener\"\n      color=\"primary\"\n    >\n      project's repository\n    </Link>\n    <ErrorDetails details={details} />\n  </Alert>\n);\n\nexport const GithubRepositoryConfigError: React.FC<{}> = () => (\n  <Alert severity=\"error\">\n    <AlertTitle>Invalid GitHub repository</AlertTitle>\n    Please set a valid repository URL in the{\" \"}\n    <RouterLink to=\"/settings\">settings</RouterLink>\n  </Alert>\n);\n\nexport const Error: React.FC<{ error: ApolloError }> = ({ error }) => {\n  if (error.graphQLErrors.length > 0) {\n    return <GraphQLError details={error.message} />;\n  }\n\n  if (error.networkError && \"statusCode\" in error.networkError) {\n    if (error.networkError.statusCode === 401) {\n      return \"result\" in error.networkError &&\n        error.networkError.result?.message === \"Bad credentials\" ? (\n        <BadCredentialsError />\n      ) : (\n        <UnauthenticatedError />\n      );\n    }\n  }\n\n  return <OtherError details={error.message} />;\n};\n","import React from \"react\";\n\nimport { useQuery, gql } from \"@apollo/client\";\nimport { LinearProgress } from \"@material-ui/core\";\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\n\nimport { Search, IssueStateFilter } from \"./Search\";\nimport { IssueListItem } from \"./IssueListItem\";\nimport { LoadMore } from \"./LoadMore\";\nimport { Error } from \"./Error\";\nimport { GithubConfig, GQLSearchIssues } from \"./types\";\n\nconst issuesQuery = gql`\n  query SearchIssues($query: String!, $after: String) {\n    search(type: ISSUE, query: $query, last: 10, after: $after) {\n      edges {\n        node {\n          ... on Issue {\n            author {\n              login\n            }\n            comments {\n              totalCount\n            }\n            id\n            number\n            state\n            title\n            createdAt\n          }\n        }\n      }\n      pageInfo {\n        startCursor\n        hasPreviousPage\n        hasNextPage\n        endCursor\n      }\n    }\n  }\n`;\n\nconst IssueListItems: React.FC<{\n  githubRepositoryOwner: string;\n  githubRepositoryName: string;\n  issueStateFilter: IssueStateFilter;\n  issueTextFilter: string;\n}> = ({\n  githubRepositoryOwner,\n  githubRepositoryName,\n  issueStateFilter,\n  issueTextFilter,\n}) => {\n  const query: string[] = [\n    `repo:${githubRepositoryOwner}/${githubRepositoryName}`,\n    `is:issue`,\n    `sort:created`,\n    issueTextFilter,\n  ];\n\n  if (issueStateFilter === IssueStateFilter.open) {\n    query.push(\"is:open\");\n  } else if (issueStateFilter === IssueStateFilter.closed) {\n    query.push(\"is:closed\");\n  }\n\n  const { loading, error, data, fetchMore } = useQuery<GQLSearchIssues>(\n    issuesQuery,\n    {\n      variables: {\n        query: query.join(\" \"),\n      },\n    }\n  );\n\n  if (loading) return <LinearProgress />;\n  if (error) return <Error error={error} />;\n  if (!data || data.search.edges.length === 0)\n    return (\n      <Alert severity=\"info\">\n        <AlertTitle>No issues found</AlertTitle>\n      </Alert>\n    );\n\n  const fetchMoreIssues = (): void => {\n    fetchMore({\n      variables: {\n        after: data.search.pageInfo.endCursor,\n      },\n    });\n  };\n\n  return (\n    <>\n      {data.search.edges.map(\n        ({\n          node: {\n            id,\n            number,\n            title,\n            state,\n            createdAt,\n            author: { login: authorLogin },\n            comments: { totalCount: totalCommentCount },\n          },\n        }) => (\n          <IssueListItem\n            {...{\n              number,\n              title,\n              state,\n              createdAt,\n              authorLogin,\n              totalCommentCount,\n            }}\n            key={id}\n          />\n        )\n      )}\n      {data.search.pageInfo.hasNextPage && (\n        <LoadMore loadMore={fetchMoreIssues} />\n      )}\n    </>\n  );\n};\n\nexport const IssueList: React.FC<{\n  githubConfig: Required<GithubConfig>;\n}> = ({ githubConfig }) => {\n  const [issueStateFilter, setIssueStateFilter] = React.useState<\n    IssueStateFilter\n  >(IssueStateFilter.both);\n\n  const [issueTextFilter, setIssueTextFilter] = React.useState<string>(\"\");\n\n  return (\n    <>\n      <Search\n        {...{\n          issueStateFilter,\n          setIssueStateFilter,\n          issueTextFilter,\n          setIssueTextFilter,\n        }}\n      />\n      <IssueListItems\n        {...{\n          githubRepositoryName: githubConfig.repositoryName,\n          githubRepositoryOwner: githubConfig.repositoryOwner,\n          issueStateFilter,\n          issueTextFilter,\n        }}\n      />\n    </>\n  );\n};\n","import React from \"react\";\n\nimport htmlParser from \"html-react-parser\";\nimport DOMPurify from \"dompurify\";\n\nimport \"github-markdown-css\";\n\nexport const CommentBody: React.FC<{\n  bodyHTML: string;\n}> = ({ bodyHTML }) => {\n  return (\n    <div className=\"markdown-body\">\n      {htmlParser(DOMPurify.sanitize(bodyHTML))}\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { Avatar, CardContent, CardHeader, Link, Card } from \"@material-ui/core\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\n\nimport { CommentBody } from \"./CommentBody\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      marginLeft: theme.spacing(3),\n      marginBottom: theme.spacing(1),\n    },\n    header: {\n      \"& > .MuiCardHeader-avatar\": {\n        marginRight: theme.spacing(1),\n      },\n    },\n    avatar: {\n      width: theme.spacing(3),\n      height: theme.spacing(3),\n    },\n  })\n);\n\nexport const IssueComment: React.FC<{\n  createdAt: string;\n  authorLogin: string;\n  authorUrl: string;\n  authorAvatarUrl: string;\n  bodyHTML: string;\n}> = ({ createdAt, authorLogin, authorUrl, authorAvatarUrl, bodyHTML }) => {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root} variant=\"outlined\">\n      <CardHeader\n        avatar={\n          <Avatar\n            alt={authorLogin}\n            src={authorAvatarUrl}\n            className={classes.avatar}\n          >\n            {authorLogin.substr(0, 1)}\n          </Avatar>\n        }\n        titleTypographyProps={{ variant: \"h5\" }}\n        subheader={\n          <span>\n            <Link href={authorUrl} target=\"_blank\" rel=\"noopener\">\n              {authorLogin}\n            </Link>{\" \"}\n            on {createdAt}\n          </span>\n        }\n        className={classes.header}\n      />\n      <CardContent>\n        <CommentBody bodyHTML={bodyHTML} />\n      </CardContent>\n    </Card>\n  );\n};\n","import React from \"react\";\n\nimport { useQuery, gql } from \"@apollo/client\";\nimport { LinearProgress } from \"@material-ui/core\";\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\n\nimport { IssueComment } from \"./IssueComment\";\nimport { LoadMore } from \"./LoadMore\";\nimport { Error } from \"./Error\";\nimport { GithubConfig, GQLIssueComments } from \"./types\";\n\nconst commentsQuery = gql`\n  query GetIssueComments(\n    $githubRepositoryName: String!\n    $githubRepositoryOwner: String!\n    $issueNumber: Int!\n    $after: String\n  ) {\n    repository(name: $githubRepositoryName, owner: $githubRepositoryOwner) {\n      issue(number: $issueNumber) {\n        id\n        comments(first: 10, after: $after) {\n          edges {\n            node {\n              id\n              createdAt\n              author {\n                login\n                avatarUrl\n                url\n              }\n              bodyHTML\n            }\n          }\n          pageInfo {\n            startCursor\n            hasPreviousPage\n            hasNextPage\n            endCursor\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const IssueComments: React.FC<{\n  githubConfig: Required<GithubConfig>;\n  issueNumber: number;\n}> = ({ githubConfig, issueNumber }) => {\n  const { loading, error, data, fetchMore } = useQuery<GQLIssueComments>(\n    commentsQuery,\n    {\n      variables: {\n        githubRepositoryName: githubConfig.repositoryName,\n        githubRepositoryOwner: githubConfig.repositoryOwner,\n        issueNumber,\n      },\n    }\n  );\n\n  if (loading) return <LinearProgress />;\n  if (error) return <Error error={error} />;\n  if (!data || data.repository.issue.comments.edges.length === 0)\n    return (\n      <Alert severity=\"info\">\n        <AlertTitle>No comments yets</AlertTitle>\n      </Alert>\n    );\n\n  const fetchMoreComments = (): void => {\n    fetchMore({\n      variables: {\n        after: data.repository.issue.comments.pageInfo.endCursor,\n      },\n    });\n  };\n\n  return (\n    <>\n      {data.repository.issue.comments.edges.map(\n        ({\n          node: {\n            author: {\n              login: authorLogin,\n              url: authorUrl,\n              avatarUrl: authorAvatarUrl,\n            },\n            bodyHTML,\n            createdAt,\n            id,\n          },\n        }) => (\n          <IssueComment\n            {...{\n              createdAt,\n              authorLogin,\n              authorUrl,\n              authorAvatarUrl,\n              bodyHTML,\n            }}\n            key={id}\n          />\n        )\n      )}\n      {data.repository.issue.comments.pageInfo.hasNextPage && (\n        <LoadMore loadMore={fetchMoreComments} />\n      )}\n    </>\n  );\n};\n","import React from \"react\";\n\nimport { useQuery, gql } from \"@apollo/client\";\nimport { useParams } from \"react-router-dom\";\n\nimport {\n  Avatar,\n  Card,\n  CardContent,\n  CardHeader,\n  Chip,\n  Grid,\n  IconButton,\n  LinearProgress,\n  Link,\n  Typography,\n} from \"@material-ui/core\";\nimport {} from \"@material-ui/core\";\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport { ErrorOutline, CheckCircleOutline, GitHub } from \"@material-ui/icons\";\nimport { green, red } from \"@material-ui/core/colors\";\n\nimport { Error } from \"./Error\";\nimport { IssueComments } from \"./IssueComments\";\nimport { CommentBody } from \"./CommentBody\";\nimport { GithubConfig, GQLGetIssue } from \"./types\";\n\nconst issueQuery = gql`\n  query GetIssue(\n    $githubRepositoryName: String!\n    $githubRepositoryOwner: String!\n    $issueNumber: Int!\n  ) {\n    repository(name: $githubRepositoryName, owner: $githubRepositoryOwner) {\n      issue(number: $issueNumber) {\n        id\n        number\n        state\n        title\n        url\n        author {\n          avatarUrl(size: 40)\n          login\n          url\n        }\n        bodyHTML\n        createdAt\n      }\n    }\n  }\n`;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      paddingBottom: theme.spacing(5),\n    },\n    firstComment: {\n      marginBottom: theme.spacing(1),\n    },\n    issueStatusChip: {\n      color: \"white\",\n      marginLeft: theme.spacing(1),\n    },\n    issueStatusChipOpen: {\n      backgroundColor: green[400],\n    },\n    issueStatusChipClosed: {\n      backgroundColor: red[600],\n    },\n    issueStatusIcon: {\n      color: \"white\",\n    },\n  })\n);\n\nexport const Issue: React.FC<{\n  githubConfig: Required<GithubConfig>;\n}> = ({ githubConfig }) => {\n  const classes = useStyles();\n\n  const { issueNumber: issueNumberParam } = useParams();\n  const issueNumber = parseInt(issueNumberParam, 10);\n\n  const { loading, error, data } = useQuery<GQLGetIssue>(issueQuery, {\n    variables: {\n      githubRepositoryOwner: githubConfig.repositoryOwner,\n      githubRepositoryName: githubConfig.repositoryName,\n      issueNumber,\n    },\n  });\n\n  if (loading) return <LinearProgress />;\n  if (error) return <Error error={error} />;\n  if (!data || !data.repository.issue)\n    return (\n      <Alert severity=\"warning\">\n        <AlertTitle>Issue not found</AlertTitle>\n      </Alert>\n    );\n  const { issue } = data.repository;\n\n  return (\n    <div className={classes.root}>\n      <Card variant=\"outlined\" className={classes.firstComment}>\n        <CardHeader\n          avatar={\n            <Avatar alt={issue.author.login} src={issue.author.avatarUrl}>\n              {issue.author.login.substr(0, 1)}\n            </Avatar>\n          }\n          action={\n            <IconButton\n              aria-label=\"settings\"\n              component={Link}\n              href={issue.url}\n              target=\"_blank\"\n              rel=\"noopener\"\n              color=\"primary\"\n            >\n              <Grid container direction=\"column\" alignItems=\"center\">\n                <GitHub />\n                <Typography variant=\"body2\">#{issue.number}</Typography>\n              </Grid>\n            </IconButton>\n          }\n          title={issue.title}\n          titleTypographyProps={{ variant: \"h5\" }}\n          subheader={\n            <Grid container alignItems=\"center\">\n              <Typography display=\"inline\">\n                by{\" \"}\n                <Link href={issue.author.url} target=\"_blank\" rel=\"noopener\">\n                  {issue.author.login}\n                </Link>{\" \"}\n                on {issue.createdAt}\n              </Typography>\n              {issue.state === \"OPEN\" ? (\n                <Chip\n                  label=\"Open\"\n                  size=\"small\"\n                  icon={<ErrorOutline className={classes.issueStatusIcon} />}\n                  className={`${classes.issueStatusChip} ${classes.issueStatusChipOpen}`}\n                />\n              ) : (\n                <Chip\n                  label=\"Closed\"\n                  size=\"small\"\n                  icon={\n                    <CheckCircleOutline className={classes.issueStatusIcon} />\n                  }\n                  className={`${classes.issueStatusChip} ${classes.issueStatusChipClosed}`}\n                />\n              )}\n            </Grid>\n          }\n        />\n        <CardContent>\n          <CommentBody bodyHTML={issue.bodyHTML} />\n        </CardContent>\n      </Card>\n\n      <IssueComments githubConfig={githubConfig} issueNumber={issueNumber} />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport { Container } from \"@material-ui/core\";\n\nimport \"./app.css\";\nimport { Navigation } from \"./Navigation\";\nimport { Settings } from \"./Settings\";\nimport { IssueList } from \"./IssueList\";\nimport { Issue } from \"./Issue\";\nimport { UnauthenticatedError, GithubRepositoryConfigError } from \"./Error\";\n\nimport { readKeyFromLocalStorage } from \"../helpers\";\nimport { defaultGitHubRepository, githubRepositoryRegex } from \"../config\";\nimport { GithubConfig } from \"./types\";\n\nconst AuthWrapper: React.FC<{\n  githubConfig: GithubConfig;\n}> = ({ githubConfig, children }) => {\n  if (!githubConfig.repositoryOwner || !githubConfig.repositoryName) {\n    return <GithubRepositoryConfigError />;\n  }\n  if (!githubConfig.token) {\n    return <UnauthenticatedError />;\n  }\n\n  return <>{children}</>;\n};\n\nexport const App: React.FC<{}> = () => {\n  const githubRepositoryUrl = readKeyFromLocalStorage(\n    \"githubRepository\",\n    defaultGitHubRepository\n  );\n  const githubRepositoryMatch = githubRepositoryUrl.match(\n    githubRepositoryRegex\n  );\n\n  const githubConfig: GithubConfig = {\n    token: readKeyFromLocalStorage(\"githubToken\", undefined),\n    repositoryUrl: githubRepositoryUrl,\n    repositoryOwner: githubRepositoryMatch?.groups?.owner,\n    repositoryName: githubRepositoryMatch?.groups?.name,\n  };\n\n  return (\n    <Router\n      basename={\n        // GitHub pages navigation workaround\n        // see https://github.com/rafgraph/spa-github-pages#single-page-apps-for-github-pages\n        process.env.NODE_ENV === \"production\"\n          ? \"/mms-github-issue-explorer\"\n          : \"/\"\n      }\n    >\n      <Navigation />\n\n      <Container maxWidth=\"md\">\n        <Switch>\n          <Route path=\"/settings\">\n            <Settings />\n          </Route>\n          <Route path=\"/:issueNumber\">\n            <AuthWrapper githubConfig={githubConfig}>\n              <Issue githubConfig={githubConfig as Required<GithubConfig>} />\n            </AuthWrapper>\n          </Route>\n          <Route path=\"/\">\n            <AuthWrapper githubConfig={githubConfig}>\n              <IssueList\n                githubConfig={githubConfig as Required<GithubConfig>}\n              />\n            </AuthWrapper>\n          </Route>\n        </Switch>\n      </Container>\n    </Router>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { App } from \"./components/App\";\n\nimport { ApolloProvider } from \"@apollo/client\";\n\nimport { createApolloClient } from \"./apollo\";\n\nconst apolloClient = createApolloClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={apolloClient}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import {\n  ApolloClient,\n  InMemoryCache,\n  NormalizedCacheObject,\n  createHttpLink,\n} from \"@apollo/client\";\n\nimport { setContext } from \"@apollo/client/link/context\";\nimport { relayStylePagination } from \"@apollo/client/utilities\";\n\nimport { githubGraphQLEndpoint } from \"./config\";\nimport { readKeyFromLocalStorage } from \"./helpers\";\n\nexport const createApolloClient = (): ApolloClient<NormalizedCacheObject> => {\n  const httpLink = createHttpLink({\n    uri: githubGraphQLEndpoint,\n  });\n\n  const authLink = setContext((_, { headers }) => {\n    const githubToken = readKeyFromLocalStorage<string>(\"githubToken\", \"\");\n    return {\n      headers: {\n        ...headers,\n        authorization: githubToken ? `bearer ${githubToken}` : \"\",\n      },\n    };\n  });\n\n  return new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache({\n      typePolicies: {\n        // the user (`author` prop) `login` (username) is distinct no matter if\n        // the user data is fetched from the `GetIssue` query or the `SearchIssues`\n        User: {\n          keyFields: [\"login\"],\n        },\n        // `Repository` queries are the ones for fetching single issues (`GetIssue`)\n        // hence the nested `id` prop. of the issue should be used as the cache key\n        Repository: {\n          keyFields: [[\"id\"]],\n        },\n        Issue: {\n          fields: {\n            // pagination policy for comment retrieval\n            comments: relayStylePagination([[\"issueNumber\"]]),\n          },\n        },\n        Query: {\n          fields: {\n            // pagination policy for issue search/list\n            search: relayStylePagination([\"query\"]),\n          },\n        },\n      },\n    }),\n    connectToDevTools: true,\n  });\n};\n"],"sourceRoot":""}